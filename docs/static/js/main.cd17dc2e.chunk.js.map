{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","Counter","prevProps","prevState","counter","value","this","props","classes","formatCountColor","style","fontSize","width","formatCountForZero","onClick","onIncrement","onDecrement","onDelete","id","Component","Counters","onReset","counters","onAdd","backgroundColor","borderColor","map","key","App","state","count","length","handleIncrement","index","indexOf","setState","handleDecrement","handleReset","c","handleDelete","counterId","filter","handleAdd","push","Fragment","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cd17dc2e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n// Stateless Fuctional Component\r\nconst NavBar = ({ totalCounters }) => {\r\n  console.log(\"Navbar - Rendered\");\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar{\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"prevProps\", prevProps);\r\n    console.log(\"prevProps\", prevState);\r\n    if (prevProps.counter.value != this.props.counter.value) {\r\n      //Ajax call and get new data from the server\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"Counter - Unmount\");\r\n  }\r\n\r\n  formatCountColor() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"warning\";\r\n    return classes;\r\n  }\r\n\r\n  formatCountForZero() {\r\n    return this.props.counter.value === 0 ? \"Zero\" : this.props.counter.value;\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Counter - Rendered\");\r\n    return (\r\n      <div>\r\n        <span\r\n          className={this.formatCountColor()}\r\n          style={{ fontSize: 20, width: 60 }}\r\n        >\r\n          {\" \"}\r\n          {this.formatCountForZero()}{\" \"}\r\n        </span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          -\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    const {\r\n      onReset,\r\n      counters,\r\n      onDelete,\r\n      onIncrement,\r\n      onDecrement,\r\n      onAdd,\r\n    } = this.props;\r\n    console.log(\"Counters - Rendered\");\r\n\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        <button\r\n          onClick={onAdd}\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n          style={{ backgroundColor: \"#25b900\", borderColor: \"#25b900\" }}\r\n        >\r\n          Add\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrement={onDecrement}\r\n            counter={counter}\r\n          ></Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n  count = this.state.counters.length;\n\n  constructor(props) {\n    super(props);\n    console.log(\"App - Constructor\");\n  }\n\n  componentDidMount() {\n    console.log(\"App - Mounted\");\n  }\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDecrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    if (counters[index].value > 0) {\n      counters[index].value--;\n    }\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleAdd = () => {\n    const counters = [...this.state.counters];\n    counters.push({ id: ++this.count, value: 0 });\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"App - Rendered\");\n\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            onAdd={this.handleAdd}\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}